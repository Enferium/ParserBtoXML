/* ParserBTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserBTokenManager.java */
package grammaire ;
import java.io.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserBTokenManager implements ParserBConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20L) != 0L)
            return 19;
         if ((active1 & 0x20000000L) != 0L)
            return 20;
         if ((active0 & 0x1fffffffffe0L) != 0L || (active1 & 0xff00086800000000L) != 0L || (active2 & 0x3fffffffffffffffL) != 0L)
         {
            jjmatchedKind = 190;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0x88b02900100L) != 0L || (active1 & 0x800000000L) != 0L || (active2 & 0x3000004006L) != 0L)
            return 8;
         if ((active0 & 0x1774fd6ffee0L) != 0L || (active1 & 0xff00086000000000L) != 0L || (active2 & 0x3fffffcfffffbff9L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 190;
               jjmatchedPos = 1;
            }
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x1200a1000440L) != 0L || (active1 & 0x3c00082000000000L) != 0L || (active2 & 0x4a1803f3c02861aL) != 0L)
            return 8;
         if ((active0 & 0x5745cfffba0L) != 0L || (active1 & 0xc300004000000000L) != 0L || (active2 & 0x3b5e7fc0c3fd39e1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 190;
               jjmatchedPos = 2;
            }
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x6014000080L) != 0L || (active1 & 0x3300004000000000L) != 0L || (active2 & 0x8291142835f1900L) != 0L)
            return 8;
         if ((active0 & 0x151448ffff20L) != 0L || (active1 & 0xc000000000000000L) != 0L || (active2 & 0x33566eac40a020e3L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 190;
               jjmatchedPos = 3;
            }
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0x40048800000L) != 0L || (active1 & 0xc000000000000000L) != 0L || (active2 & 0x3208608000a42003L) != 0L)
            return 8;
         if ((active0 & 0x1114007fff20L) != 0L || (active2 & 0x1560e2c400000e0L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000003fed20L) != 0L || (active2 & 0x104002c000000e0L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 5;
            return 8;
         }
         if ((active0 & 0x11400401200L) != 0L || (active2 & 0x520e0040000000L) != 0L)
            return 8;
         return -1;
      case 6:
         if ((active0 & 0x3fed00L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 190;
               jjmatchedPos = 6;
            }
            return 8;
         }
         if ((active0 & 0x100000000020L) != 0L || (active2 & 0x104002c000000e0L) != 0L)
            return 8;
         return -1;
      case 7:
         if ((active0 & 0x3fed00L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 7;
            return 8;
         }
         if ((active2 & 0x800000080L) != 0L)
            return 8;
         return -1;
      case 8:
         if ((active0 & 0x3fa800L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 8;
            return 8;
         }
         if ((active0 & 0x4500L) != 0L)
            return 8;
         return -1;
      case 9:
         if ((active0 & 0x3f2000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 9;
            return 8;
         }
         if ((active0 & 0x8800L) != 0L)
            return 8;
         return -1;
      case 10:
         if ((active0 & 0x1f0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 10;
            return 8;
         }
         if ((active0 & 0x202000L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0x1f0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 11;
            return 8;
         }
         return -1;
      case 12:
         if ((active0 & 0x1f0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 13;
            return 8;
         }
         if ((active0 & 0x100000L) != 0L)
            return 8;
         return -1;
      case 14:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 14;
            return 8;
         }
         return -1;
      case 15:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 15;
            return 8;
         }
         return -1;
      case 16:
         if ((active0 & 0xf0000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 16;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 90);
      case 35:
         return jjStopAtPos(0, 91);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 88);
      case 38:
         return jjStopAtPos(0, 100);
      case 39:
         return jjStopAtPos(0, 119);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L, 0x0L);
      case 43:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x4000L, 0x0L);
      case 46:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L, 0x0L);
      case 47:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0xe4000000000004L, 0x8000000810000L, 0x0L);
      case 58:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40010L, 0x0L);
      case 59:
         return jjStopAtPos(0, 118);
      case 60:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x513800000000000L, 0x9308L, 0x0L);
      case 61:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x80000L, 0x0L);
      case 62:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x8200000000000000L, 0x2007L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200a0200L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100800000L, 0x0L, 0x10000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4400056000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80000200000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x10018001040L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2800000000000000L, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x202100100L, 0x0L, 0x3000000002L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0xc0000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf00000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8800000800L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x1008000L, 0x1400000000000000L, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000000080L, 0x0L, 0x20000002000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x4000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x120000400400L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x42040000000L, 0x0L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 69, 19);
      case 92:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 70);
      case 94:
         return jjStopAtPos(0, 109);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400200080000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000001001c0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000008a00000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x2000000000050024L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000001000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x10000000000600L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000000L, 0x6000000081000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1020000034000010L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x189000042028800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x900000400000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 93, 20);
      case 124:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000c80L, 0x0L);
      case 125:
         return jjStopAtPos(0, 94);
      case 126:
         return jjStopAtPos(0, 92);
      case 176:
         return jjStopAtPos(0, 114);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 43:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1L, active2, 0L);
      case 45:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7c00000000000000L, active1, 0x8eL, active2, 0L);
      case 46:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      case 47:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         break;
      case 48:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 58:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 60:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         return jjMoveStringLiteralDfa2_0(active0, 0x34000000000000L, active1, 0x100L, active2, 0L);
      case 61:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x124000400420L, active1, 0L, active2, 0x48f00000000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1080a00080L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 8);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 8);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x42444000000L, active1, 0L, active2, 0L);
      case 73:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 142, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x2800000000000000L, active2, 0x80000002000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20100140L, active1, 0L, active2, 0x3000000003L);
      case 79:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x56000L, active1, 0x1400000000000000L, active2, 0x10000000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x1008000L, active1, 0L, active2, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000000000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 92:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x60000001400310L);
      case 100:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 130, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000340a8000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1418000002800400L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x2000000008000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x82000000000L, active2, 0x85c00080100008L);
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 99, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300000000000000L, active2, 0x202100000201000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x50000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200040000020L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000000800L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         break;
      case 47:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         break;
      case 58:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 60:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 48);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         return jjMoveStringLiteralDfa3_0(active0, 0xa800000000000000L, active1, 0x2L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 8);
         break;
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x2044001800L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000100000L, active1, 0L, active2, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400000L, active1, 0L, active2, 0x8000000000L);
      case 78:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x56000L, active1, 0x2000000000000000L, active2, 0x80000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x400008000L, active1, 0L, active2, 0x10000000000L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000400L, active1, 0L, active2, 0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40180a0200L, active1, 0L, active2, 0L);
      case 84:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 8);
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000080L, active1, 0L, active2, 0x2e00000002L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 87:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 89:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 8);
         break;
      case 92:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000000L);
      case 99:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 155, 8);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 157, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 100:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2100000051020L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2800000000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000004000000000L, active2, 0x200000000400000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300000000000000L, active2, 0L);
      case 108:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 8);
         break;
      case 109:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 131, 8);
         break;
      case 110:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 8);
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 186, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x21400000100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x802000c0L);
      case 112:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 175, 8);
         break;
      case 113:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10200040880100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000001000000L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x40000000000000L);
      case 118:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 154, 8);
         break;
      case 120:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 137, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000002000000L);
      case 124:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 8);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 8);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 8);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 8);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 161, 8);
         break;
      case 50:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 8);
         break;
      case 58:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 53);
         break;
      case 62:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 59);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 8);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 8);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000200L, active1, 0L, active2, 0x2000000002L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000020L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x100408a00400L, active1, 0L, active2, 0xe0000000000L);
      case 76:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 78:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 8);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000800L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L, active1, 0L, active2, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x1a0000L, active1, 0L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L, active2, 0xc00000000L);
      case 99:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 8);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 8);
         break;
      case 100:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 136, 8);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 8);
         break;
      case 101:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 172, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x8200000000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1040000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L);
      case 107:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 8);
         break;
      case 108:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 8);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 8);
         break;
      case 109:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 8);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 112:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 8);
         break;
      case 113:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000000000020L);
      case 115:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 176, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000008000c0L);
      case 116:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 8);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x304000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 8);
         break;
      case 65:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000c00L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 8);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 8);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 167, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000408000L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 8);
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100020L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 8);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0xe0000000000L);
      case 82:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0xf0300L, active1, 0L, active2, 0xc00000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x7000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 101:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 173, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000000L);
      case 110:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000000000000L);
      case 114:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000000000L);
      case 116:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 8);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 8);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 174, 8);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 8);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 8);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc0L);
      case 120:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 189, 8);
         break;
      case 121:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 185, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1a4000L, active2, 0xc00000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active2, 0L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x50000L, active2, 0x2000000000L);
      case 71:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 8);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200100L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000020L, active2, 0L);
      case 82:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0xa000L, active2, 0L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 8);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 8);
         break;
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 8);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 8);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 8);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x100000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x4000000000000L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 8);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0xc0L);
      case 116:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x20L);
      case 120:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 177, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000L, active2, 0L);
      case 69:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 8);
         break;
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active2, 0L);
      case 76:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100400L, active2, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active2, 0L);
      case 82:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 8);
         break;
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x258000L, active2, 0L);
      case 101:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 133, 8);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 184, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x80L);
      case 120:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 178, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 49:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 135, 8);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 163, 8);
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x50400L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x30a000L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0xa4000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x2800L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 8);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 8);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 8);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0xf0000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 11, 8);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x30000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0000L);
      case 83:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 8);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0xc0000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x30000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x30000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 20, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0xc0000L);
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x30000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0x30000L);
      case 78:
         return jjMoveStringLiteralDfa16_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x30000L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(17, 16, 8);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(17, 17, 8);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(17, 18, 8);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(17, 19, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 192)
                        kind = 192;
                     { jjCheckNAdd(18); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 20:
               case 2:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 19:
               case 5:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 190)
                     kind = 190;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 13:
                  if (curChar == 34 && kind > 191)
                     kind = 191;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 192)
                     kind = 192;
                  { jjCheckNAdd(18); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 190)
                        kind = 190;
                     { jjCheckNAdd(8); }
                  }
                  else if (curChar == 91)
                     { jjAddStates(7, 8); }
                  else if (curChar == 123)
                     { jjAddStates(9, 10); }
                  break;
               case 20:
               case 3:
                  if (curChar == 125 && kind > 45)
                     kind = 45;
                  break;
               case 19:
               case 6:
                  if (curChar == 93 && kind > 46)
                     kind = 46;
                  break;
               case 1:
                  if (curChar == 123)
                     { jjAddStates(9, 10); }
                  break;
               case 4:
                  if (curChar == 91)
                     { jjAddStates(7, 8); }
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 190)
                     kind = 190;
                  { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if (curChar == 92)
                     { jjAddStates(11, 13); }
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 10:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x8L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   10, 11, 13, 10, 11, 15, 13, 5, 6, 2, 3, 12, 14, 16, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\115\101\103\110\111\116\105", "\105\116\104", 
"\123\105\124\123", "\111\116\126\101\122\111\101\116\124", "\101\123\123\105\122\124", 
"\126\101\122\111\101\102\114\105\123", "\117\120\105\122\101\124\111\117\116\123", "\105\126\105\116\124\123", 
"\103\117\116\123\124\122\101\111\116\124\123", "\103\117\116\123\124\101\116\124\123", 
"\120\122\117\120\105\122\124\111\105\123", "\103\117\116\103\122\105\124\105\137\126\101\122\111\101\102\114\105\123", 
"\101\102\123\124\122\101\103\124\137\126\101\122\111\101\102\114\105\123", "\103\117\116\103\122\105\124\105\137\103\117\116\123\124\101\116\124\123", 
"\101\102\123\124\122\101\103\124\137\103\117\116\123\124\101\116\124\123", "\111\116\111\124\111\101\114\111\123\101\124\111\117\116", 
"\104\105\106\111\116\111\124\111\117\116\123", "\126\101\114\125\105\123", "\102\105\107\111\116", "\120\122\105", 
"\111\106", "\124\110\105\116", "\105\114\123\111\106", "\105\114\123\105", 
"\101\116\131", "\127\110\105\122\105", "\114\105\124", "\102\105", "\111\116", 
"\103\110\117\111\103\105", "\117\122", "\123\105\114\105\103\124", "\127\110\105\116", 
"\103\101\123\105", "\117\106", "\105\111\124\110\105\122", "\126\101\122", 
"\127\110\111\114\105", "\104\117", "\126\101\122\111\101\116\124", null, null, "\74\76", "\74\75\76", 
"\74\72", "\57\74\72", "\75\76", "\74\74\72", "\57\74\74\72", "\57\72", "\57\75", 
"\74\75", "\76\75", "\74\55\76", "\53\55\76\76", "\53\55\76", "\55\55\76\76", 
"\55\55\76", "\76\53\76\76", "\76\53\76", "\76\55\76\76", "\76\55\76", "\74\55\55", 
"\72\75", "\133", "\135", "\174\55\76", "\74\74\174", "\74\174", "\174\76\76", 
"\174\76", "\74\53", "\76\74", "\55\76", "\74\55", "\57\174\134", "\134\174\57", 
"\72\72", "\75\75", "\56\56", "\52\52", "\134\57", "\57\134", "\45", "\174", "\41", 
"\43", "\176", "\173", "\175", "\56", "\50", "\51", "\54", "\157\162", "\46", 
"\156\157\164", "\163\153\151\160", "\55", "\53", "\52", "\57", "\155\157\144", "\75", "\136", 
"\74", "\76", "\72", "\44\60", "\260", "\57\57", "\134", "\174\174", "\73", "\47", 
"\160\162\152\61", "\160\162\152\62", "\120\117\127", "\106\111\116", "\120\117\127\61", 
"\106\111\116\61", "\151\156\164\145\162", "\165\156\151\157\156", "\125\116\111\117\116", 
"\111\116\124\105\122", "\151\144", "\144\157\155", "\162\141\156", "\151\164\145\162\141\164\145", 
"\143\154\157\163\165\162\145", "\143\154\157\163\165\162\145\61", "\143\141\162\144", "\155\141\170", 
"\155\151\156", "\163\165\143\143", "\160\162\145\144", "\123\111\107\115\101", "\120\111", 
"\163\145\161", "\151\163\145\161", "\163\145\161\61", "\151\163\145\161\61", 
"\160\145\162\155", "\143\157\156\143", "\146\162\157\156\164", "\164\141\151\154", 
"\146\151\162\163\164", "\154\141\163\164", "\163\151\172\145", "\162\145\166", "\146\156\143", 
"\162\145\154", "\162\145\143", "\163\164\162\165\143\164", "\142\157\157\154", 
"\116\101\124", "\116\101\124\61", "\116\101\124\125\122\101\114", 
"\116\101\124\125\122\101\114\61", "\111\116\124", "\111\116\124\105\107\105\122", "\124\122\125\105", 
"\106\101\114\123\105", "\102\117\117\114", "\123\124\122\111\116\107", "\115\101\130\111\116\124", 
"\115\111\116\111\116\124", "\164\162\145\145", "\142\164\162\145\145", "\143\157\156\163\164", 
"\164\157\160", "\163\157\156\163", "\160\162\145\146\151\170", 
"\160\157\163\164\146\151\170", "\163\151\172\145\164", "\155\151\162\162\157\162", "\162\141\156\153", 
"\146\141\164\150\145\162", "\163\157\156", "\163\165\142\164\162\145\145", "\141\162\151\164\171", 
"\142\151\156", "\154\145\146\164", "\162\151\147\150\164", "\151\156\146\151\170", null, null, 
null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserBTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserBTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 19; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x10L, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[19];
    private final int[] jjstateSet = new int[2 * 19];

    
    protected char curChar;
}
