/* Generated By:JJTree&JavaCC: Do not edit this line. ParserBConstants.java */
package grammaire ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserBConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Machine = 5;
  /** RegularExpression Id. */
  int End = 6;
  /** RegularExpression Id. */
  int Sets = 7;
  /** RegularExpression Id. */
  int Invariant = 8;
  /** RegularExpression Id. */
  int Assert = 9;
  /** RegularExpression Id. */
  int Variables = 10;
  /** RegularExpression Id. */
  int Operations = 11;
  /** RegularExpression Id. */
  int Events = 12;
  /** RegularExpression Id. */
  int Constraints = 13;
  /** RegularExpression Id. */
  int Constants = 14;
  /** RegularExpression Id. */
  int Properties = 15;
  /** RegularExpression Id. */
  int ConcreteVariables = 16;
  /** RegularExpression Id. */
  int AbstractVariables = 17;
  /** RegularExpression Id. */
  int ConcreteConstants = 18;
  /** RegularExpression Id. */
  int AbstractConstants = 19;
  /** RegularExpression Id. */
  int Initialisation = 20;
  /** RegularExpression Id. */
  int Definitions = 21;
  /** RegularExpression Id. */
  int Values = 22;
  /** RegularExpression Id. */
  int Begin = 23;
  /** RegularExpression Id. */
  int Pre = 24;
  /** RegularExpression Id. */
  int If = 25;
  /** RegularExpression Id. */
  int Then = 26;
  /** RegularExpression Id. */
  int Elsif = 27;
  /** RegularExpression Id. */
  int Else = 28;
  /** RegularExpression Id. */
  int Any = 29;
  /** RegularExpression Id. */
  int Where = 30;
  /** RegularExpression Id. */
  int Let = 31;
  /** RegularExpression Id. */
  int Be = 32;
  /** RegularExpression Id. */
  int InLetVar = 33;
  /** RegularExpression Id. */
  int Choice = 34;
  /** RegularExpression Id. */
  int OrC = 35;
  /** RegularExpression Id. */
  int Select = 36;
  /** RegularExpression Id. */
  int When = 37;
  /** RegularExpression Id. */
  int Case = 38;
  /** RegularExpression Id. */
  int Of = 39;
  /** RegularExpression Id. */
  int Either = 40;
  /** RegularExpression Id. */
  int Var = 41;
  /** RegularExpression Id. */
  int While = 42;
  /** RegularExpression Id. */
  int Do = 43;
  /** RegularExpression Id. */
  int Variant = 44;
  /** RegularExpression Id. */
  int EmptySet = 45;
  /** RegularExpression Id. */
  int EmptySequence = 46;
  /** RegularExpression Id. */
  int EmptySequenceOld = 47;
  /** RegularExpression Id. */
  int Equivalence = 48;
  /** RegularExpression Id. */
  int Subset = 49;
  /** RegularExpression Id. */
  int NotSubset = 50;
  /** RegularExpression Id. */
  int Implication = 51;
  /** RegularExpression Id. */
  int StrictSubset = 52;
  /** RegularExpression Id. */
  int NotStrictSubset = 53;
  /** RegularExpression Id. */
  int NotSetMemberShip = 54;
  /** RegularExpression Id. */
  int NotEqual = 55;
  /** RegularExpression Id. */
  int LessThanOrEqual = 56;
  /** RegularExpression Id. */
  int GreatherThanOrEqual = 57;
  /** RegularExpression Id. */
  int Relation = 58;
  /** RegularExpression Id. */
  int PartialSurjection = 59;
  /** RegularExpression Id. */
  int PartialFunction = 60;
  /** RegularExpression Id. */
  int TotalSurjection = 61;
  /** RegularExpression Id. */
  int TotalFunction = 62;
  /** RegularExpression Id. */
  int PartialBijection = 63;
  /** RegularExpression Id. */
  int PartialInjection = 64;
  /** RegularExpression Id. */
  int TotalBijection = 65;
  /** RegularExpression Id. */
  int TotalInjection = 66;
  /** RegularExpression Id. */
  int OperationReturn = 67;
  /** RegularExpression Id. */
  int DevientEgal = 68;
  /** RegularExpression Id. */
  int OpenCurly = 69;
  /** RegularExpression Id. */
  int CloseCurly = 70;
  /** RegularExpression Id. */
  int Maplet = 71;
  /** RegularExpression Id. */
  int DomainSubstraction = 72;
  /** RegularExpression Id. */
  int DomainRestriction = 73;
  /** RegularExpression Id. */
  int RangeSubstraction = 74;
  /** RegularExpression Id. */
  int RangeRestriction = 75;
  /** RegularExpression Id. */
  int Override = 76;
  /** RegularExpression Id. */
  int DirectProduct = 77;
  /** RegularExpression Id. */
  int PrependSequence = 78;
  /** RegularExpression Id. */
  int AppendSequence = 79;
  /** RegularExpression Id. */
  int PrefixSequence = 80;
  /** RegularExpression Id. */
  int SuffixSequence = 81;
  /** RegularExpression Id. */
  int SetIn = 82;
  /** RegularExpression Id. */
  int EqualEqual = 83;
  /** RegularExpression Id. */
  int NatRange = 84;
  /** RegularExpression Id. */
  int Power = 85;
  /** RegularExpression Id. */
  int Union = 86;
  /** RegularExpression Id. */
  int Intersection = 87;
  /** RegularExpression Id. */
  int Lambda = 88;
  /** RegularExpression Id. */
  int SuchAs = 89;
  /** RegularExpression Id. */
  int Forall = 90;
  /** RegularExpression Id. */
  int Exists = 91;
  /** RegularExpression Id. */
  int Tilde = 92;
  /** RegularExpression Id. */
  int OpenBraces = 93;
  /** RegularExpression Id. */
  int CloseBraces = 94;
  /** RegularExpression Id. */
  int Point = 95;
  /** RegularExpression Id. */
  int OpenParen = 96;
  /** RegularExpression Id. */
  int CloseParen = 97;
  /** RegularExpression Id. */
  int Comma = 98;
  /** RegularExpression Id. */
  int Or = 99;
  /** RegularExpression Id. */
  int And = 100;
  /** RegularExpression Id. */
  int Not = 101;
  /** RegularExpression Id. */
  int Skip = 102;
  /** RegularExpression Id. */
  int Minus = 103;
  /** RegularExpression Id. */
  int Plus = 104;
  /** RegularExpression Id. */
  int Product = 105;
  /** RegularExpression Id. */
  int Division = 106;
  /** RegularExpression Id. */
  int Modulo = 107;
  /** RegularExpression Id. */
  int Equal = 108;
  /** RegularExpression Id. */
  int ConcatSequence = 109;
  /** RegularExpression Id. */
  int LessThan = 110;
  /** RegularExpression Id. */
  int GreatherThan = 111;
  /** RegularExpression Id. */
  int In = 112;
  /** RegularExpression Id. */
  int DollarZero = 113;
  /** RegularExpression Id. */
  int Composition = 114;
  /** RegularExpression Id. */
  int ParallelProduct = 115;
  /** RegularExpression Id. */
  int SetMinus = 116;
  /** RegularExpression Id. */
  int Parallel = 117;
  /** RegularExpression Id. */
  int SemiColon = 118;
  /** RegularExpression Id. */
  int Quote = 119;
  /** RegularExpression Id. */
  int Prj1 = 120;
  /** RegularExpression Id. */
  int Prj2 = 121;
  /** RegularExpression Id. */
  int POW = 122;
  /** RegularExpression Id. */
  int FIN = 123;
  /** RegularExpression Id. */
  int POW1 = 124;
  /** RegularExpression Id. */
  int FIN1 = 125;
  /** RegularExpression Id. */
  int InterGen = 126;
  /** RegularExpression Id. */
  int UnionGen = 127;
  /** RegularExpression Id. */
  int UnionQuant = 128;
  /** RegularExpression Id. */
  int InterQuant = 129;
  /** RegularExpression Id. */
  int Id = 130;
  /** RegularExpression Id. */
  int Dom = 131;
  /** RegularExpression Id. */
  int Ran = 132;
  /** RegularExpression Id. */
  int Iterate = 133;
  /** RegularExpression Id. */
  int Closure = 134;
  /** RegularExpression Id. */
  int Closure1 = 135;
  /** RegularExpression Id. */
  int Card = 136;
  /** RegularExpression Id. */
  int Max = 137;
  /** RegularExpression Id. */
  int Min = 138;
  /** RegularExpression Id. */
  int Succ = 139;
  /** RegularExpression Id. */
  int Pred = 140;
  /** RegularExpression Id. */
  int Sigma = 141;
  /** RegularExpression Id. */
  int Pi = 142;
  /** RegularExpression Id. */
  int Seq = 143;
  /** RegularExpression Id. */
  int Iseq = 144;
  /** RegularExpression Id. */
  int Seq1 = 145;
  /** RegularExpression Id. */
  int Iseq1 = 146;
  /** RegularExpression Id. */
  int Perm = 147;
  /** RegularExpression Id. */
  int Conc = 148;
  /** RegularExpression Id. */
  int Front = 149;
  /** RegularExpression Id. */
  int Tail = 150;
  /** RegularExpression Id. */
  int First = 151;
  /** RegularExpression Id. */
  int Last = 152;
  /** RegularExpression Id. */
  int Size = 153;
  /** RegularExpression Id. */
  int Rev = 154;
  /** RegularExpression Id. */
  int Fnc = 155;
  /** RegularExpression Id. */
  int Rel = 156;
  /** RegularExpression Id. */
  int Rec = 157;
  /** RegularExpression Id. */
  int Struct = 158;
  /** RegularExpression Id. */
  int Bool = 159;
  /** RegularExpression Id. */
  int Nat = 160;
  /** RegularExpression Id. */
  int Nat1 = 161;
  /** RegularExpression Id. */
  int Natural = 162;
  /** RegularExpression Id. */
  int Natural1 = 163;
  /** RegularExpression Id. */
  int Int = 164;
  /** RegularExpression Id. */
  int Integer = 165;
  /** RegularExpression Id. */
  int True = 166;
  /** RegularExpression Id. */
  int False = 167;
  /** RegularExpression Id. */
  int Boolean = 168;
  /** RegularExpression Id. */
  int StringSet = 169;
  /** RegularExpression Id. */
  int MaxInt = 170;
  /** RegularExpression Id. */
  int MinInt = 171;
  /** RegularExpression Id. */
  int Tree = 172;
  /** RegularExpression Id. */
  int Btree = 173;
  /** RegularExpression Id. */
  int Const = 174;
  /** RegularExpression Id. */
  int Top = 175;
  /** RegularExpression Id. */
  int Sons = 176;
  /** RegularExpression Id. */
  int Prefix = 177;
  /** RegularExpression Id. */
  int Postfix = 178;
  /** RegularExpression Id. */
  int Sizet = 179;
  /** RegularExpression Id. */
  int Mirror = 180;
  /** RegularExpression Id. */
  int Rank = 181;
  /** RegularExpression Id. */
  int Father = 182;
  /** RegularExpression Id. */
  int Son = 183;
  /** RegularExpression Id. */
  int Subtree = 184;
  /** RegularExpression Id. */
  int Arity = 185;
  /** RegularExpression Id. */
  int Bin = 186;
  /** RegularExpression Id. */
  int Left = 187;
  /** RegularExpression Id. */
  int Right = 188;
  /** RegularExpression Id. */
  int Infix = 189;
  /** RegularExpression Id. */
  int IDENTIFIER = 190;
  /** RegularExpression Id. */
  int String = 191;
  /** RegularExpression Id. */
  int Number = 192;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 4>",
    "\"MACHINE\"",
    "\"END\"",
    "\"SETS\"",
    "\"INVARIANT\"",
    "\"ASSERT\"",
    "\"VARIABLES\"",
    "\"OPERATIONS\"",
    "\"EVENTS\"",
    "\"CONSTRAINTS\"",
    "\"CONSTANTS\"",
    "\"PROPERTIES\"",
    "\"CONCRETE_VARIABLES\"",
    "\"ABSTRACT_VARIABLES\"",
    "\"CONCRETE_CONSTANTS\"",
    "\"ABSTRACT_CONSTANTS\"",
    "\"INITIALISATION\"",
    "\"DEFINITIONS\"",
    "\"VALUES\"",
    "\"BEGIN\"",
    "\"PRE\"",
    "\"IF\"",
    "\"THEN\"",
    "\"ELSIF\"",
    "\"ELSE\"",
    "\"ANY\"",
    "\"WHERE\"",
    "\"LET\"",
    "\"BE\"",
    "\"IN\"",
    "\"CHOICE\"",
    "\"OR\"",
    "\"SELECT\"",
    "\"WHEN\"",
    "\"CASE\"",
    "\"OF\"",
    "\"EITHER\"",
    "\"VAR\"",
    "\"WHILE\"",
    "\"DO\"",
    "\"VARIANT\"",
    "<EmptySet>",
    "<EmptySequence>",
    "\"<>\"",
    "\"<=>\"",
    "\"<:\"",
    "\"/<:\"",
    "\"=>\"",
    "\"<<:\"",
    "\"/<<:\"",
    "\"/:\"",
    "\"/=\"",
    "\"<=\"",
    "\">=\"",
    "\"<->\"",
    "\"+->>\"",
    "\"+->\"",
    "\"-->>\"",
    "\"-->\"",
    "\">+>>\"",
    "\">+>\"",
    "\">->>\"",
    "\">->\"",
    "\"<--\"",
    "\":=\"",
    "\"[\"",
    "\"]\"",
    "\"|->\"",
    "\"<<|\"",
    "\"<|\"",
    "\"|>>\"",
    "\"|>\"",
    "\"<+\"",
    "\"><\"",
    "\"->\"",
    "\"<-\"",
    "\"/|\\\\\"",
    "\"\\\\|/\"",
    "\"::\"",
    "\"==\"",
    "\"..\"",
    "\"**\"",
    "\"\\\\/\"",
    "\"/\\\\\"",
    "\"%\"",
    "\"|\"",
    "\"!\"",
    "\"#\"",
    "\"~\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"or\"",
    "\"&\"",
    "\"not\"",
    "\"skip\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"mod\"",
    "\"=\"",
    "\"^\"",
    "\"<\"",
    "\">\"",
    "\":\"",
    "\"$0\"",
    "\"\\u00b0\"",
    "\"//\"",
    "\"\\\\\"",
    "\"||\"",
    "\";\"",
    "\"\\\'\"",
    "\"prj1\"",
    "\"prj2\"",
    "\"POW\"",
    "\"FIN\"",
    "\"POW1\"",
    "\"FIN1\"",
    "\"inter\"",
    "\"union\"",
    "\"UNION\"",
    "\"INTER\"",
    "\"id\"",
    "\"dom\"",
    "\"ran\"",
    "\"iterate\"",
    "\"closure\"",
    "\"closure1\"",
    "\"card\"",
    "\"max\"",
    "\"min\"",
    "\"succ\"",
    "\"pred\"",
    "\"SIGMA\"",
    "\"PI\"",
    "\"seq\"",
    "\"iseq\"",
    "\"seq1\"",
    "\"iseq1\"",
    "\"perm\"",
    "\"conc\"",
    "\"front\"",
    "\"tail\"",
    "\"first\"",
    "\"last\"",
    "\"size\"",
    "\"rev\"",
    "\"fnc\"",
    "\"rel\"",
    "\"rec\"",
    "\"struct\"",
    "\"bool\"",
    "\"NAT\"",
    "\"NAT1\"",
    "\"NATURAL\"",
    "\"NATURAL1\"",
    "\"INT\"",
    "\"INTEGER\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"BOOL\"",
    "\"STRING\"",
    "\"MAXINT\"",
    "\"MININT\"",
    "\"tree\"",
    "\"btree\"",
    "\"const\"",
    "\"top\"",
    "\"sons\"",
    "\"prefix\"",
    "\"postfix\"",
    "\"sizet\"",
    "\"mirror\"",
    "\"rank\"",
    "\"father\"",
    "\"son\"",
    "\"subtree\"",
    "\"arity\"",
    "\"bin\"",
    "\"left\"",
    "\"right\"",
    "\"infix\"",
    "<IDENTIFIER>",
    "<String>",
    "<Number>",
  };

}
